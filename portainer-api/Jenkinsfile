pipeline {
    agent { node { label 'Linux' } }
    
    environment {
        PROJECT_NAME = 'portainer-api'
        DOCKERFILE_PATH = './Dockerfile'
        REGISTRY_HOST = 'hub.docker.com'
        REGISTRY_GROUP = 'fundamental'
    }

    stages {
        stage('build') {
            steps {
                updateGitlabCommitStatus name: 'build', state: 'running'
                echo "Build docker image then push to registry."
                echo "Current branch: ${BRANCH_NAME}"
                script {
                    def tag = sh(returnStdout: true, script: "git tag --contains | tail -1 | cut -d 'v' -f 2").trim()
                    docker.withRegistry("https://${REGISTRY_HOST}", "gitlab-cicd") {
                        def dockerTag = env.BRANCH_NAME == 'master' ? 'latest' : 'dev'
                        def image = docker.build("${REGISTRY_GROUP}/${PROJECT_NAME}:${dockerTag}", "-f ${DOCKERFILE_PATH} .")
                        image.push("${dockerTag}")
                        if (tag) {
                            image.push("${tag}")
                        }
                    }
                }
            }
        }
        stage('test') {
            steps {
                echo "testing..."   
            }
        }
    }

    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
            telegramSend 'Build ${PROJECT_NAME} successfully!'
            updateGitlabCommitStatus name: 'build', state: 'success'
        }
        failure {
            echo 'This will run only if failed'
            telegramSend 'Build ${PROJECT_NAME} failed!'
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }

    options {
      gitLabConnection('git.yourdomain.com')
    }

    triggers {
        gitlab(triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: 'All')
    }
}